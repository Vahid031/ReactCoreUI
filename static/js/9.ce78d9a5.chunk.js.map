{"version":3,"sources":["utilities/AuthService.js","views/pages/login/Login.js"],"names":["API_URL","AuthService","username","password","axios","post","then","response","data","succeeded","localStorage","setItem","JSON","stringify","removeItem","email","parse","getItem","console","log","undefined","useStyles","makeStyles","palette","cardHolder","background","card","maxWidth","borderRadius","margin","buttonProgress","position","top","left","marginTop","marginLeft","Login","props","useState","loading","setLoading","userInfo","setUserInfo","message","setMessage","classes","handleChange","target","name","value","temp","className","container","item","lg","md","sm","xs","src","alt","onSubmit","e","preventDefault","login","history","push","window","location","reload","error","variant","size","label","onChange","type","validators","errorMessages","control","checked","agreement","color","disabled"],"mappings":"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","file":"static/js/9.ce78d9a5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"https://localhost:44377/\";\r\n\r\nclass AuthService {\r\n  \r\n  login(username, password) {\r\n   \r\n    return axios\r\n      .post(API_URL + \"api/Account/authenticate\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => response.data)\r\n      .then(response => {\r\n\r\n        if (response.succeeded) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n\r\n  isLoggedIn(){\r\n\r\n    console.log(JSON.parse(localStorage.getItem('user')));\r\n    // return false;\r\n  return  JSON.parse(localStorage.getItem('user')) !== undefined;\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Card,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n} from '@material-ui/core'\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AuthService from 'src/utilities/AuthService'\r\n\r\n\r\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\r\n  cardHolder: {\r\n      background: '#1A2038',\r\n  },\r\n  card: {\r\n      maxWidth: 800,\r\n      borderRadius: 12,\r\n      margin: '1rem',\r\n  },\r\n  buttonProgress: {\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      marginTop: -12,\r\n      marginLeft: -12,\r\n  },\r\n}))\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [userInfo, setUserInfo] = useState({\r\n      email: 'jason@ui-lib.com',\r\n      password: 'dummyPass',\r\n  })\r\n  const [message, setMessage] = useState('')\r\n\r\n  const classes = useStyles()\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n      let temp = { ...userInfo }\r\n      temp[name] = value\r\n      setUserInfo(temp)\r\n  }\r\n\r\n\r\n    const handleFormSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n  \r\n        AuthService.login(userInfo.email, userInfo.password)\r\n        .then(() => {\r\n            props.history.push(\"/\");\r\n            window.location.reload();\r\n          },\r\n          error => {\r\n            console.log(error)\r\n            setMessage(error.message)\r\n            setLoading(false)\r\n          }\r\n        );\r\n     \r\n    }\r\n  return (\r\n    <div className={classes.card + ' flex justify-center items-center  min-h-full-screen '}>\r\n    <Card className={classes.card}>\r\n        <Grid container>\r\n            <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                <div className=\"p-8 flex justify-center items-center h-full\">\r\n                    <img\r\n                        className=\"w-200\"\r\n                        src=\"/assets/images/illustrations/dreamer.svg\"\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n            </Grid>\r\n            <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                <div className=\"p-8 h-full bg-light-gray relative\">\r\n                    <ValidatorForm onSubmit={handleFormSubmit}>\r\n                        <TextValidator\r\n                            className=\"mb-6 w-full\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            label=\"Email\"\r\n                            onChange={handleChange}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={userInfo.email}\r\n                            validators={['required', 'isEmail']}\r\n                            errorMessages={[\r\n                                'this field is required',\r\n                                'email is not valid',\r\n                            ]}\r\n                        />\r\n                        <TextValidator\r\n                            className=\"mb-3 w-full\"\r\n                            label=\"Password\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onChange={handleChange}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={userInfo.password}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <FormControlLabel\r\n                            className=\"mb-3 min-w-288\"\r\n                            name=\"agreement\"\r\n                            onChange={handleChange}\r\n                            control={\r\n                                <Checkbox\r\n                                    size=\"small\"\r\n                                    onChange={({\r\n                                        target: { checked },\r\n                                    }) =>\r\n                                        handleChange({\r\n                                            target: {\r\n                                                name: 'agreement',\r\n                                                value: checked,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                    checked={userInfo.agreement || true}\r\n                                />\r\n                            }\r\n                            label=\"Remeber me\"\r\n                        />\r\n\r\n                        {message && (\r\n                            <p className=\"text-error\">{message}</p>\r\n                        )}\r\n\r\n                        <div className=\"flex flex-wrap items-center mb-4\">\r\n                            <div className=\"relative\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={loading}\r\n                                    type=\"submit\"\r\n                                >\r\n                                    Sign in\r\n                                </Button>\r\n                                {loading && (\r\n                                    <CircularProgress\r\n                                        size={24}\r\n                                        className={\r\n                                            classes.buttonProgress\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                            <span className=\"mr-2 ml-5\">or</span>\r\n                            <Button\r\n                                className=\"capitalize\"\r\n                                // onClick={() =>\r\n                                    // history.push('/session/signup')\r\n                                // }\r\n                            >\r\n                                Sign up\r\n                            </Button>\r\n                        </div>\r\n                        <Button\r\n                            className=\"text-primary\"\r\n                            // onClick={() =>\r\n                            //     history.push('/session/forgot-password')\r\n                            // }\r\n                        >\r\n                            Forgot password?\r\n                        </Button>\r\n                    </ValidatorForm>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    </Card>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n"],"sourceRoot":""}